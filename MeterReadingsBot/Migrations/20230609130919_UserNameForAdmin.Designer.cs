// <auto-generated />
using System;
using System.Collections.Generic;
using MeterReadingsBot.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeterReadingsBot.Migrations
{
    [DbContext(typeof(BotContext))]
    [Migration("20230609130919_UserNameForAdmin")]
    partial class UserNameForAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeterReadingsBot.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("ColdWaterBathroom")
                        .HasColumnType("integer");

                    b.Property<int?>("ColdWaterKitchen")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("HotWaterBathroom")
                        .HasColumnType("integer");

                    b.Property<int?>("HotWaterKitchen")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TempClients");
                });

            modelBuilder.Entity("MeterReadingsBot.Entities.UserClientBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("DISCRIMINATOR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeLastMessage")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserClients");

                    b.HasDiscriminator<string>("DISCRIMINATOR").HasValue("UserClientBase");
                });

            modelBuilder.Entity("MeterReadingsBot.Entities.AdminUserClient", b =>
                {
                    b.HasBaseType("MeterReadingsBot.Entities.UserClientBase");

                    b.Property<int>("AdminUserState")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AdminUserClient");
                });

            modelBuilder.Entity("MeterReadingsBot.Entities.StartUserClient", b =>
                {
                    b.HasBaseType("MeterReadingsBot.Entities.UserClientBase");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("StartUserClient");
                });

            modelBuilder.Entity("MeterReadingsBot.Entities.WaterReadingsUserClient", b =>
                {
                    b.HasBaseType("MeterReadingsBot.Entities.UserClientBase");

                    b.Property<List<string>>("PersonalNumbers")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("TempClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("WaterReadingsState")
                        .HasColumnType("integer");

                    b.HasIndex("TempClientId");

                    b.HasDiscriminator().HasValue("WaterReadingsUserClient");
                });

            modelBuilder.Entity("MeterReadingsBot.Entities.WaterReadingsUserClient", b =>
                {
                    b.HasOne("MeterReadingsBot.Entities.Client", "TempClient")
                        .WithMany()
                        .HasForeignKey("TempClientId");

                    b.Navigation("TempClient");
                });
#pragma warning restore 612, 618
        }
    }
}
